#CHIRANJEEV DAS - BBI14001
"""
This program searches for RE Recognition Sites within a Nucleic Acid sequence
in a file and returns the number of sites and their positions.
Optionally, it can also calculate the fragment lengths generated by the RE.
"""

import re
import matplotlib.pyplot as plt
import numpy as np
import time

fname = input("> NOTE: Sequence file must not have description line.\n> Enter sequence file name : ") #name of sequence file
#fname = "./wgs/test1.txt"
query  = input("> Enter search pattern: ") #pattern to look for in sequence
#query = 'atgc'
cleave_site = int(input("> Input the cleavage site (relative to the start of recognition sequence).\n> e.g. EcoRI cleaves G^AATTC at +1 position. \n> {ENTER ONLY NUMERIC VALUE} : "))

seq_buff = list()

f = open(fname, "r") #opens the sequence file
for x in f:
  seq_buff.append(x) #puts all characters x from the sequence file into seq_buff

seq= ("".join(map(str, seq_buff))) #removes "," , "[]" , "\n" and " "  to join all strings

n = [m.start() for m in re.finditer(query.lower(), seq.lower())] #finds "query" in "seq" and returns all positions as list "n"
n[:] = [x + 1 for x in n] #corrects the positions due to list starting from position [0]

hits = len(n)

"""INITIAL ANALYSIS"""

print ("\n> Your pattern [",query.upper(),"]\n\n> Cleavage Site [","+",cleave_site,"]\n\n> Hits [",hits,"] \n\n> Sequence file [",fname,"]\n\n> Sequence length: [",len(seq),"]") #gives actual positions of query in seq

f.close()

"""GC PERCENTAGE"""

guanine_seq = [mg.start() for mg in re.finditer("g", seq.lower())] #number of "G"s in sequence file
hits_g_seq = len(guanine_seq)
cytosine_seq = [mc.start() for mc in re.finditer("c", seq.lower())] #number of "C"s in sequence file
hits_c_seq = len(cytosine_seq)

gc = ((hits_g_seq+hits_c_seq)/len(seq))*100

"""EXPECTED NUMBER OF RESTRICTION SITES"""

gc_a = 0.5 - (gc/2)/100
gc_t = 0.5 - (gc/2)/100
gc_g = (gc/2)/100
gc_c = (gc/2)/100

adenine = [ma.start() for ma in re.finditer("a", query.lower())] #number of "A"s in query
hits_a=len(adenine)
thymidine = [mt.start() for mt in re.finditer("t", query.lower())] #number of "T"s in query
hits_t = len(thymidine)
guanine = [mg.start() for mg in re.finditer("g", query.lower())] #number of "G"s in query
hits_g = len(guanine)
cytosine = [mc.start() for mc in re.finditer("c", query.lower())] #number of "C"s in query
hits_c = len(cytosine)

#formula to calculate expected number of restriction sites based on gc percentage
expect_hits = pow(gc_a, hits_a) * pow(gc_t, hits_t) * pow(gc_g, hits_g) * pow(gc_c, hits_c) * len(seq)

""" FRAG LENGTH """

frag_length = list()
trailer = list()
final_frags = list()

p=0
q=1

print("\n> Fragments: [",hits+1,"]")

n2 = [x + cleave_site for x in n]
frag_length_part = [q - p for q, p in zip(n2[1:], n2)]

frag1 = n[0]-1
leader = frag1 + cleave_site

trailer_start = len(seq) - n[hits-1]
trailer_end = (1 - cleave_site)
trailer = trailer_start + trailer_end

final_frags = [leader]+frag_length_part+[trailer]

"""GEL DIAGRAM"""

plt.rcParams.update({'font.size': 14})

x_ax = list()
x_ax = [1] * (hits+1) #value of all x axes = 1

y_ax = final_frags     # y axis values = fragment lengths

plt.scatter(x_ax, y_ax, color= "black",  marker= "_" , s=10000, alpha = 0.2) # s = size of marker & alpha = transparancy
plt.yticks(np.arange(0, max(y_ax)+1, 1000.0))
plt.xticks([]) #hiding x axis ticks and text

plt.ylabel('Fragment Length (in bp)')  # naming the y axis

plt.title(str(query.upper())+' '+'(+'+str(cleave_site)+') digestion in '+str(fname))

gel = plt.gcf()
gel.set_size_inches(15, 15)

"""FILE OUTPUT"""

timestr = time.strftime("%Y%m%d_%H%M%S")

print("\n> Output saved as 'output_<current date & time>.txt' in working directory.")
output = open('output_'+timestr+'.txt','w')
output.write("\nQUERY: \n")
output.write(query.upper())
output.write("\n\nCLEAVAGE SITE: \n")
output.write("+"+str(cleave_site))
output.write("\n\nEXPECTED HITS: \n")
output.write(str(expect_hits))
output.write("\n\nHITS: \n")
output.write(str(hits))
output.write("\n\nPOSITIONS: \n")
output.write(str(n))
output.write("\n\nFRAGMENT LENGTHS: \n")
output.write(str(final_frags))
output.write("\n\nSEQUENCE LENGTH: \n")
output.write(str(len(seq)))
output.write("\n\nGC PERCENTAGE: \n")
output.write(str(gc))
output.write("\n\nFULL SEQUENCE: \n")
output.write(str(seq.upper()))

output.close()

print("> \nPlease wait. Generating gel image... \n")
gel.savefig("gel_"+timestr+".png", dpi = 300)
print("> Gel image saved as 'gel_<current date & time>.png' in working directory.")

print("\n> All Done.")
print("> Exiting.\n")
